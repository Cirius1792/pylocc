"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[653],{7444:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"api-usage","title":"API Usage","description":"You can integrate pylocc in your python scripts by adding it as dependency.","source":"@site/docs/api-usage.md","sourceDirName":".","slug":"/api-usage","permalink":"/pylocc/docs/api-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/Cirius1792/pylocc/tree/main/docs/docs/api-usage.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"CLI Usage","permalink":"/pylocc/docs/cli-usage"},"next":{"title":"Configuration","permalink":"/pylocc/docs/configuration"}}');var i=o(4848),r=o(8453);const a={sidebar_position:4},c="API Usage",s={},u=[{value:"Configuration Factory",id:"configuration-factory",level:2},{value:"Per file type",id:"per-file-type",level:3},{value:"Per file extension",id:"per-file-extension",level:3}];function f(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"api-usage",children:"API Usage"})}),"\n",(0,i.jsx)(n.p,{children:"You can integrate pylocc in your python scripts by adding it as dependency."}),"\n",(0,i.jsx)(n.p,{children:"The default language.json is distrubuted along with the package and there are commodities to load it by default.\nYou can also define your own language configuration to use."}),"\n",(0,i.jsx)(n.h2,{id:"configuration-factory",children:"Configuration Factory"}),"\n",(0,i.jsx)(n.h3,{id:"per-file-type",children:"Per file type"}),"\n",(0,i.jsx)(n.p,{children:"You can use the Configuration Factory to load the configuration depending on the file type."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Create a configuration factory using the default configuration\nconfiguration_factory = ProcessorConfigurationFactory.get_default_factory()\n# If you already know the language that you are going to process, you can use the corresponding Language \n# enum to load the proper configuration and use the configuration factory to retrieve the \n# corresponding ProcessorConfiguration\nfile_configuration = configuration_factory.get_configuration(file_type=Language.JAVA)\n\nwith open(f, 'r', encoding='utf-8', errors='ignore', buffering=8192) as f_handle:\n    report = count_locs(f_handle, file_configuration=file_configuration)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"per-file-extension",children:"Per file extension"}),"\n",(0,i.jsx)(n.p,{children:"You can use the Configuration Factory to load the configuration depending on the file extension."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Create a configuration factory using the default configuration\nconfiguration_factory = ProcessorConfigurationFactory.get_default_factory()\n# Retrieve the extension of the file to get the proper configuration to use\n# and use the configuration factory to retrieve the appropriate ProcessorConfiguration\nfile_configuration = configuration_factory.get_configuration(file_extension=file_extension)\n\nwith open(f, 'r', encoding='utf-8', errors='ignore', buffering=8192) as f_handle:\n    report = count_locs(f_handle, file_configuration=file_configuration)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>c});var t=o(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
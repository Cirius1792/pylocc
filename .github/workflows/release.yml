name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options: [patch, minor, major]
  workflow_run:
    workflows: ["Tests"]
    types: [completed]
    branches: [main]

jobs:
  check-release:
    # For workflow_run, ensure tests succeeded. For workflow_dispatch, always allow.
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version-type: ${{ steps.check.outputs.version-type }}
      commit-sha: ${{ steps.get-commit.outputs.commit-sha }}
      commit-message: ${{ steps.get-commit.outputs.commit-message }}
    steps:
      - uses: actions/checkout@v4

      - name: Resolve target commit
        id: resolve
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Get triggering commit message
        id: get-commit
        run: |
          COMMIT_SHA="${{ steps.resolve.outputs.sha }}"
          COMMIT_MSG=$(git log --format=%B -n 1 "$COMMIT_SHA")
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "commit-message=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "Commit message: $COMMIT_MSG"

      - name: Determine release parameters
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version-type=${{ github.event.inputs.logLevel }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          COMMIT_MSG="${{ steps.get-commit.outputs.commit-message }}"
          if [[ "$COMMIT_MSG" =~ ^RELEASE\ -\ (major|minor|patch) ]]; then
            VERSION_TYPE=$(echo "$COMMIT_MSG" | sed -n 's/^RELEASE - \(major\|minor\|patch\).*/\1/p')
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version-type=$VERSION_TYPE" >> $GITHUB_OUTPUT
            echo "Release detected: $VERSION_TYPE"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "No release pattern found in commit message"
          fi

  smoke-test:
    needs: check-release
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.check-release.outputs.commit-sha }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install

      - name: Build package (pre-publish smoke)
        run: |
          uv build

      - name: Smoke test built wheel imports
        shell: bash
        run: |
          python -m venv .venv_smoke
          source .venv_smoke/bin/activate
          python -m pip install --upgrade pip
          pip install dist/*.whl
          python - << 'PY'
          import sys
          print('Python:', sys.version)
          # Core imports
          import pylocc
          from pylocc.cli import pylocc as cli_entry
          from pylocc.language import Language
          from pylocc.processor import ProcessorConfigurationFactory, load_default_language_config, count_locs
          from pylocc.reporter import aggregate_reports, prepare_by_file_report
          from pylocc.file_utils import get_all_file_paths

          # Basic checks
          assert hasattr(Language, 'PYTHON'), 'Language enum missing PYTHON member'
          configs = load_default_language_config()
          assert configs, 'No language configurations loaded'
          factory = ProcessorConfigurationFactory(configs)
          cfg = factory.get_configuration(file_type=Language.PYTHON)
          assert cfg is not None, 'No configuration found for PYTHON'

          # Minimal counting sanity check
          text = ['# comment\n', '\n', "print('hi')\n"]
          report = count_locs(text, cfg)
          assert report.comments >= 1 and report.blanks >= 1 and report.code >= 1, 'Unexpected LOC counts'
          print('Smoke test passed: imports and basic count OK')
          PY

      - name: Smoke test sdist imports
        shell: bash
        run: |
          python -m venv .venv_smoke_sdist
          source .venv_smoke_sdist/bin/activate
          python -m pip install --upgrade pip
          pip install dist/*.tar.gz
          python - << 'PY'
          import sys
          print('Python:', sys.version)
          # Core imports
          import pylocc
          from pylocc.cli import pylocc as cli_entry
          from pylocc.language import Language
          from pylocc.processor import ProcessorConfigurationFactory, load_default_language_config, count_locs
          from pylocc.reporter import aggregate_reports, prepare_by_file_report
          from pylocc.file_utils import get_all_file_paths

          # Basic checks
          assert hasattr(Language, 'PYTHON'), 'Language enum missing PYTHON member (sdist)'
          configs = load_default_language_config()
          assert configs, 'No language configurations loaded (sdist)'
          factory = ProcessorConfigurationFactory(configs)
          cfg = factory.get_configuration(file_type=Language.PYTHON)
          assert cfg is not None, 'No configuration found for PYTHON (sdist)'

          # Minimal counting sanity check
          text = ['# comment\n', '\n', "print('hi')\n"]
          report = count_locs(text, cfg)
          assert report.comments >= 1 and report.blanks >= 1 and report.code >= 1, 'Unexpected LOC counts (sdist)'
          print('Smoke test (sdist) passed: imports and basic count OK')
          PY

  publish:
    needs: [check-release, smoke-test]
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    environment: pypi  # Optional: use environment protection
    permissions:
      contents: write   
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper versioning
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.check-release.outputs.commit-sha }}  # Checkout the exact commit that triggered tests

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(uv tree --depth 0 | grep "^[^├└│ ]" | head -1 | sed 's/.*v\([0-9.]*\).*/\1/' || echo "0.0.0")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Update version
        run: |
          VERSION_TYPE="${{ needs.check-release.outputs.version-type }}"
          echo "Updating version with type: $VERSION_TYPE"
          
          # Use uv to bump version
          case $VERSION_TYPE in
            major)
              uv version --bump major
              ;;
            minor)
              uv version --bump minor
              ;;
            patch)
              uv version --bump patch
              ;;
          esac

      - name: Get new version
        id: new-version
        run: |
          NEW_VERSION=$(uv tree --depth 0 | grep "^[^├└│ ]" | head -1 | sed 's/.*v\([0-9.]*\).*/\1/')
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Commit version bump
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: "Bump version to ${{ steps.new-version.outputs.new-version }} [skip ci]"

      - name: Create git tag
        run: |
          git tag "v${{ steps.new-version.outputs.new-version }}"
          git push origin "v${{ steps.new-version.outputs.new-version }}"

      - name: Build package
        run: |
          uv build

      - name: Publish to PyPI
        run: |
          uv publish --trusted-publishing always

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new-version.outputs.new-version }}
          release_name: Release v${{ steps.new-version.outputs.new-version }}
          body: |
            ## Changes
            
            Automated release triggered by commit: ${{ needs.check-release.outputs.commit-message }}
            
            Version bump: ${{ needs.check-release.outputs.version-type }}
            
          draft: false
          prerelease: false
